<?php
namespace CT550\Labs;

use PDO;
use PDOException;

class User {
    private ?PDO $db;

    public function __construct(PDO $db) {
        $this->db = $db;
    }

    /**
     * ƒêƒÉng k√Ω t√†i kho·∫£n m·ªõi
     */
    public function register(
        string $username,
        string $full_name,
        string $email,
        string $password,
        string $phone_number,
        string $role = 'customer'
    ): bool {
        try {
            // Validate c∆° b·∫£n
            if (empty($username) || empty($full_name) || empty($email) || empty($password)) {
                throw new \Exception("C√°c tr∆∞·ªùng b·∫Øt bu·ªôc kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.");
            }

            if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
                throw new \Exception("Email kh√¥ng h·ª£p l·ªá.");
            }

            if (strlen($password) < 6) {
                throw new \Exception("M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±.");
            }

            // Ki·ªÉm tra tr√πng username ho·∫∑c email
            $checkStmt = $this->db->prepare(
                "SELECT user_id FROM Users WHERE username = :username OR email = :email"
            );
            $checkStmt->execute([
                ':username' => $username,
                ':email'    => $email
            ]);
            if ($checkStmt->fetch()) {
                throw new \Exception("T√™n ƒëƒÉng nh·∫≠p ho·∫∑c email ƒë√£ t·ªìn t·∫°i.");
            }

            // Hash password
            $hashedPassword = password_hash($password, PASSWORD_BCRYPT);

            // Th√™m v√†o DB
            $stmt = $this->db->prepare("
                INSERT INTO Users (username, full_name, email, password, phone_number, role)
                VALUES (:username, :full_name, :email, :password, :phone_number, :role)
            ");

            return $stmt->execute([
                ':username'     => $username,
                ':full_name'    => $full_name,
                ':email'        => $email,
                ':password'     => $hashedPassword,
                ':phone_number' => $phone_number,
                ':role'         => $role
            ]);

        } catch (PDOException $e) {
            throw new \Exception("L·ªói CSDL: " . $e->getMessage());
        }
    }

    // ƒêƒÉng nh·∫≠p
    public function login($usernameOrEmail, $password) {
        try {
            // Cho ph√©p ƒëƒÉng nh·∫≠p b·∫±ng username ho·∫∑c email
            $stmt = $this->db->prepare("SELECT * FROM Users WHERE username = :ue OR email = :ue LIMIT 1");
            $stmt->execute([':ue' => $usernameOrEmail]);
            $user = $stmt->fetch(PDO::FETCH_ASSOC);

            if ($user && password_verify($password, $user['password'])) {
                // N·∫øu m·∫≠t kh·∫©u ƒë√∫ng th√¨ tr·∫£ v·ªÅ th√¥ng tin user (tr·ª´ password)
                unset($user['password']);
                return $user;
            }
            return false;
        } catch (PDOException $e) {
            return false;
        }
    }


    /**
     * X·ª≠ l√Ω form th√™m ng∆∞·ªùi d√πng
     */
    public function handleAddUserForm(array $postData): string {
        $message = "";

        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            $username   = trim($postData['username'] ?? '');
            $full_name  = trim($postData['full_name'] ?? '');
            $email      = trim($postData['email'] ?? '');
            $phone      = trim($postData['phone_number'] ?? '');
            $password   = $postData['password'] ?? '';

            // Ki·ªÉm tra d·ªØ li·ªáu h·ª£p l·ªá
            if (empty($username) || empty($full_name) || empty($email) || empty($password)) {
                return "<div class='alert alert-danger'>Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin.</div>";
            }

            if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
                return "<div class='alert alert-danger'>Email kh√¥ng h·ª£p l·ªá.</div>";
            }

            if (!preg_match('/^[0-9]{10,11}$/', $phone)) {
                return "<div class='alert alert-danger'>S·ªë ƒëi·ªán tho·∫°i ch·ªâ g·ªìm 10-11 ch·ªØ s·ªë.</div>";
            }

            try {
                // üîç Ki·ªÉm tra tr√πng username, email ho·∫∑c s·ªë ƒëi·ªán tho·∫°i
                $checkStmt = $this->db->prepare("
                    SELECT * FROM Users 
                    WHERE username = :username OR email = :email OR phone_number = :phone
                    LIMIT 1
                ");
                $checkStmt->execute([
                    ':username' => $username,
                    ':email'    => $email,
                    ':phone'    => $phone
                ]);
                $existing = $checkStmt->fetch(PDO::FETCH_ASSOC);

                if ($existing) {
                    if ($existing['username'] === $username) {
                        return "<div class='alert alert-danger'>T√™n ƒëƒÉng nh·∫≠p ƒë√£ t·ªìn t·∫°i.</div>";
                    }
                    if ($existing['email'] === $email) {
                        return "<div class='alert alert-danger'>Email ƒë√£ t·ªìn t·∫°i.</div>";
                    }
                    if ($existing['phone_number'] === $phone) {
                        return "<div class='alert alert-danger'>S·ªë ƒëi·ªán tho·∫°i ƒë√£ t·ªìn t·∫°i.</div>";
                    }
                }

                // N·∫øu kh√¥ng tr√πng th√¨ th√™m m·ªõi
                $hashed_pw = password_hash($password, PASSWORD_BCRYPT);

                $stmt = $this->db->prepare("
                    INSERT INTO Users (username, full_name, email, password, phone_number) 
                    VALUES (:username, :full_name, :email, :password, :phone_number)
                ");
                $stmt->execute([
                    ':username'     => $username,
                    ':full_name'    => $full_name,
                    ':email'        => $email,
                    ':password'     => $hashed_pw,
                    ':phone_number' => $phone
                ]);

                $message = "<div class='alert alert-success'>Th√™m ng∆∞·ªùi d√πng th√†nh c√¥ng!</div>";
            } catch (PDOException $e) {
                $message = "<div class='alert alert-danger'>L·ªói: " . $e->getMessage() . "</div>";
            }
        }

        return $message;
    }


    // Ch·ªânh s·ª≠a c·ªßa user

    public function getUserById($id)
    {
        $stmt = $this->db->prepare("SELECT * FROM users WHERE user_id = ?");
        $stmt->execute([$id]);
        return $stmt->fetch();
    }

    public function handleEditUserForm($user_id, $data)
    {
        $username = trim($data['username']);
        $full_name = trim($data['full_name']);
        $email = trim($data['email']);
        $phone = trim($data['phone_number']);
        $password = trim($data['password']);

        if (empty($username) || empty($full_name) || empty($email)) {
            return "<div class='alert alert-danger text-center'>‚ùå Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin b·∫Øt bu·ªôc.</div>";
        }

        if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
            return "<div class='alert alert-danger text-center'>üìß Email kh√¥ng h·ª£p l·ªá.</div>";
        }

        if (!preg_match('/^[0-9]{10,11}$/', $phone)) {
            return "<div class='alert alert-danger text-center'>üì± S·ªë ƒëi·ªán tho·∫°i ch·ªâ g·ªìm 10‚Äì11 ch·ªØ s·ªë.</div>";
        }

        try {
            // --- Ki·ªÉm tra tr√πng t√™n ƒëƒÉng nh·∫≠p ---
            $checkUsername = $this->db->prepare("SELECT user_id FROM users WHERE username = ? AND user_id != ?");
            $checkUsername->execute([$username, $user_id]);
            if ($checkUsername->fetch()) {
                return "<div class='alert alert-warning text-center'>‚ö†Ô∏è T√™n ƒëƒÉng nh·∫≠p ƒë√£ t·ªìn t·∫°i.</div>";
            }

            // --- Ki·ªÉm tra tr√πng email ---
            $checkEmail = $this->db->prepare("SELECT user_id FROM users WHERE email = ? AND user_id != ?");
            $checkEmail->execute([$email, $user_id]);
            if ($checkEmail->fetch()) {
                return "<div class='alert alert-warning text-center'>‚ö†Ô∏è Email ƒë√£ t·ªìn t·∫°i.</div>";
            }

            // --- Ki·ªÉm tra tr√πng s·ªë ƒëi·ªán tho·∫°i ---
            $checkPhone = $this->db->prepare("SELECT user_id FROM users WHERE phone_number = ? AND user_id != ?");
            $checkPhone->execute([$phone, $user_id]);
            if ($checkPhone->fetch()) {
                return "<div class='alert alert-warning text-center'>‚ö†Ô∏è S·ªë ƒëi·ªán tho·∫°i ƒë√£ t·ªìn t·∫°i.</div>";
            }

            // --- C·∫≠p nh·∫≠t d·ªØ li·ªáu ---
            if (!empty($password)) {
                $hashedPassword = password_hash($password, PASSWORD_DEFAULT);
                $sql = "UPDATE users 
                        SET username=?, full_name=?, email=?, phone_number=?, password=? 
                        WHERE user_id=?";
                $params = [$username, $full_name, $email, $phone, $hashedPassword, $user_id];
            } else {
                $sql = "UPDATE users 
                        SET username=?, full_name=?, email=?, phone_number=? 
                        WHERE user_id=?";
                $params = [$username, $full_name, $email, $phone, $user_id];
            }

            $stmt = $this->db->prepare($sql);
            $stmt->execute($params);

            return "<div class='alert alert-success text-center'>‚úÖ C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng th√†nh c√¥ng!</div>";

        } catch (PDOException $e) {
            return "<div class='alert alert-danger text-center'>‚ö†Ô∏è L·ªói h·ªá th·ªëng, vui l√≤ng th·ª≠ l·∫°i sau.</div>";
        }
    }

    // X√≥a ng∆∞·ªùi d√πng
    public function deleteUser($user_id): string
    {
        try {
            // Ki·ªÉm tra user c√≥ t·ªìn t·∫°i kh√¥ng
            $stmt = $this->db->prepare("SELECT * FROM users WHERE user_id = ?");
            $stmt->execute([$user_id]);
            $user = $stmt->fetch(PDO::FETCH_ASSOC);

            if (!$user) {
                return "<div class='alert alert-warning text-center'>‚ö†Ô∏è Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i.</div>";
            }

            // Th·ª±c hi·ªán x√≥a
            $deleteStmt = $this->db->prepare("DELETE FROM users WHERE user_id = ?");
            $deleteStmt->execute([$user_id]);

            return "<div class='alert alert-success text-center'>‚úÖ ƒê√£ x√≥a ng∆∞·ªùi d√πng th√†nh c√¥ng!</div>";

        } catch (PDOException $e) {
            return "<div class='alert alert-danger text-center'>‚ùå L·ªói khi x√≥a ng∆∞·ªùi d√πng: {$e->getMessage()}</div>";
        }
    }


}